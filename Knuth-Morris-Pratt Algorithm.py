# Алгоритм Кнута-Морриса-Пратта (Knuth-Morris-Pratt Algorithm): Поиск подстроки в строке с использованием префиксной функции.

def kmp(text, pattern):
    m, n = len(pattern), len(text)
    # Получаем длины строки и шаблона
    if not m:
        return 0
    # Если длина шаблона равна 0, возвращаем 0 (подстрока пустая)
    if not n:
        return -1
    # Если длина строки равна 0, возвращаем -1 (подстрока не найдена)
    lps = compute_lps(pattern)
    # Вычисляем таблицу префиксов для шаблона
    i, j = 0, 0
    # Индексы для перемещения по строке и шаблону
    while i < n:
        # Пока не пройдена вся строка
        if pattern[j] == text[i]:
            # Если символы совпадают, двигаемся дальше по обеим строкам
            i += 1
            j += 1
        if j == m:
            # Если весь шаблон пройден, возвращаем индекс начала подстроки в строке
            return i - j
        elif i < n and pattern[j] != text[i]:
            # Если символы не совпадают
            if j:
                j = lps[j - 1]
                # Возвращаемся к предыдущему префиксу в таблице префиксов
            else:
                i += 1
                # Или двигаемся дальше по строке
    return -1
    # Если подстрока не найдена, возвращаем -1

def compute_lps(pattern):
    length, lps = 0, [0]
    # Инициализируем длину префикса как 0 и массив длин префиксов как [0]
    for i in range(1, len(pattern)):
        # Проходимся по символам шаблона, начиная с первого
        while length and pattern[i] != pattern[length]:
            length = lps[length - 1]
            # Уменьшаем длину префикса, пока не совпадут символы или пока длина не станет равной 0
        if pattern[i] == pattern[length]:
            length += 1
            # Если символы совпали, увеличиваем длину префикса
        lps.append(length)
        # Добавляем полученную длину префикса в массив длин префиксов
    return lps
    # Возвращаем массив длин префиксов
    
    
# Пример использования функции kmp для поиска подстроки в строке
text = "ABABDABACDABABCABABYYYTY"
pattern = "YY"
result = kmp(text, pattern)
print("Индекс начала подстроки в строке:", result)