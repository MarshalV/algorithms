# Алгоритм Флойда-Уоршелла (Floyd-Warshall Algorithm)

"""Алгоритм Флойда-Уоршелла применяется в тех случаях, когда необходимо найти кратчайшие пути между всеми парами вершин в графе. 
Он широко используется в сетевых технологиях, маршрутизации данных, транспортных сетях, телекоммуникациях и других областях, 
где необходимо оптимизировать пути или маршруты в сети."""

def floyd_warshall(graph):
    # Определение функции floyd_warshall с аргументом graph (граф в виде словаря смежности)
    n = len(graph)
    # Получаем количество вершин в графе
    dist = [[float('inf') for _ in range(n)] for _ in range(n)]
    # Создаем матрицу расстояний размером n x n, заполненную бесконечностями
    for i in range(n):
        for j in range(n):
            if i == j:
                dist[i][j] = 0
            # Устанавливаем расстояние между вершиной и самой собой как 0
            elif j in graph[i]:
                dist[i][j] = graph[i][j]
            # Устанавливаем расстояние между смежными вершинами как вес ребра
    for k in range(n):
        for i in range(n):
            for j in range(n):
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])
    # Применяем алгоритм Флойда-Уоршелла для нахождения кратчайших путей между всеми парами вершин
    return dist
    # Возвращаем матрицу расстояний между всеми парами вершин
    

# Пример графа в виде словаря смежности с весами рёбер
graph = {
    0: {1: 5, 2: 3},
    1: {2: 2, 3: 6},
    2: {3: 7},
    3: {}
}

# Вызываем функцию floyd_warshall для нахождения всех кратчайших путей между вершинами
shortest_paths = floyd_warshall(graph)

# Выводим матрицу расстояний между всеми парами вершин
for row in shortest_paths:
    print(row)