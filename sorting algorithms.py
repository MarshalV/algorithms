# Быстрая сортировка (Quick Sort): Эффективный алгоритм сортировки массивов. намного быстрее "sort" при сортировки большлго объема

"""def quicksort(arr):
    # Объявление функции quicksort с аргументом arr (список, который нужно отсортировать)
    if len(arr) <= 1:
        # Если длина массива меньше или равна 1, он считается уже отсортированным, поэтому он просто возвращается
        return arr
    pivot = arr[len(arr) // 2]
    # Выбор опорного элемента, обычно среднего элемента массива, чтобы сбалансировать разделение
    left = [x for x in arr if x < pivot]
    # Создание списка left, содержащего все элементы из arr, которые меньше опорного элемента
    middle = [x for x in arr if x == pivot]
    # Создание списка middle, содержащего все элементы из arr, которые равны опорному элементу
    right = [x for x in arr if x > pivot]
    # Создание списка right, содержащего все элементы из arr, которые больше опорного элемента
    return quicksort(left) + middle + quicksort(right)
    # Рекурсивное применение quicksort к списку left, затем middle, затем right и их объединение вместе


import random
# Пример списка для сортировки
# Генерируем большой список случайных чисел
large_list = [random.randint(1, 1000) for _ in range(10000)]

# Сортируем список с помощью быстрой сортировки
sorted_large_list = quicksort(large_list)

# Выводим отсортированный список
print("Отсортированный список:", sorted_large_list[:10000], "...")  # Выводим только первые 10 элементов для наглядности"""